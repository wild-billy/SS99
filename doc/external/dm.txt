
//**************************************************************
//
// Supplementary Documentation - DM Language
// ---------------------------------------------
// Contents:
//     1 ABOUT DM
//     2 COMPILER
//     3 TYPING
//     4 LISTS
//     5 NUMBERS
//     6 PROC CALLS
//     7 VAR DEFINITIONS
//     8 CREATION/DELETION
//
//**************************************************************
/*// BEGIN Doc /////////////////////////////////////////////////


1  ABOUT DM
   -------------------------------------------------------------
   A chimeric and strange language, the bastard offspring of C 
   and Python (!). Used only for BYOND. Compiled to bytecode.
   
   It's really poorly documented, so this should help.
   -------------------------------------------------------------

2  COMPILER
   -------------------------------------------------------------
   "The compiler was adapted from a program Dan had written for 
   a comp sci class (it was actually a program that obfuscated 
   code, lol, but it had the necessary parsing)" -- Tom
   
   Needless to say the compiler has not been maintained, and it
   remains a feral and dangerous beast that Lummox and Tom will 
   not touch with a ten-foot pole. Good luck with it.
   -------------------------------------------------------------
   
3  TYPING
   -------------------------------------------------------------
   DM is weakly (but statically) typed. The compiler actually
   runs casting checks at compile-time, then does absolutely
   nothing with that information other than nag the programmer
   if they don't typecast in a way that it appreciates.
   
   It's also stringly typed, ie tons of data is (and must be)
   encoded and passed in strings, even when it'd be more logical
   to use another format. For example, DM supports hexadecimal
   but passes colors as a hex value in a string. Also, lists
   are often encoded in the following format in BYOND procs:
   MIME type 'application/x-www-form-urlencoded' ("params")
   -------------------------------------------------------------

4  LISTS
   -------------------------------------------------------------
   DM supports associative lists, including nesting. However, 
   only strings and paths are supported, and all other types can
   only be assigned to the terminal position (they can't be used
   as indices to retrieve associated data).
   
   BYOND has multiple internal list types (some of which are 
   read-only) but doesn't allow the user to define any more.
   
   Lists are simple arrays internally, according to Lummox, but
   associations are managed by a red-black tree in some cases.
   The "in" operator always uses the array search. Checking or
   assigning an association, eg X[Y], uses the tree (which means
   it's much faster). However, assigning to a key that doesn't
   yet exist in the list performs the tree search, the array
   search, the addition, the tree search, then the assignment.
   -------------------------------------------------------------
   
5  NUMBERS
   -------------------------------------------------------------
   DM offers decimal, hex, and octal. Binary not included.
   Most numbers are single-precision floats. Binary arithmetic
   is 16-bit, and as such not supported past 1111 1111 1111 1111
   (or 65535 in decimal). Hex prefix is 0x, octal prefix is 0.
   -------------------------------------------------------------

6  PROC CALLS
   -------------------------------------------------------------
   DM offers decimal, hex, and octal. Binary not included.
   Most numbers are single-precision floats. Binary arithmetic
   is 16-bit, and as such not supported past 1111 1111 1111 1111
   (or 65535 in decimal). Hex prefix is 0x, octal prefix is 0.
   -------------------------------------------------------------

7  VAR DEFINITIONS
   -------------------------------------------------------------
   Annoyingly, DM only supports a limited set of operations in
   some var definitions. Usually, object vars support absolutely
   nothing other than list(), and must be completely static 
   otherwise (so you have to set em in the object's init()). 
   Global var definitions support new() and list().
   -------------------------------------------------------------

8  CREATION/DELETION
   -------------------------------------------------------------
   To create an object:
   
     new path{var1=val1;var2=val2;...}(loc=null,arg2,arg3,...)
   
   For path: use the object path, eg /atom/movable/example.
   The curly-bracket section has var initializations, useful for
   very crude modified types (it only supports static values).
   The curly-bracketed and paren'd sections can be omitted.
   Even the path can be omitted in a typecast-new, for example:
   
     /atom/movable/example = new
    
   Now, to hard-delete something, do this:
     
     del(thing)

   This is insanely expensive, and we're not going to use it
   directly when avoidable. Instead, use 
   
     thing.delSoft()
    
   Which makes sure the object is deinitialized and such and
   tells the global garbageman to start watching it.
   -------------------------------------------------------------


*//////////////////////////////////////////////////// END Doc //
